/* 
  File.strings
  IOS12RecordVideoTutorial

  Created by trioangle on 27/08/19.
  Copyright © 2019 Arthur Knopper. All rights reserved.
*/

/*
 
 //
 //  ViewController.swift
 //  Camera
 //
 //  Created by Rizwan on 16/06/17.
 //  Copyright © 2017 Rizwan. All rights reserved.
 //
 
 import UIKit
 import AVFoundation
 
 class ViewController: UIViewController {
 
 @IBOutlet weak var previewView: UIView!
 // @IBOutlet weak var captureButton: UIButton!
 @IBOutlet weak var messageLabel: UILabel!
 @IBOutlet weak var lbl_seconds: UILabel!
 @IBOutlet weak var captureButton: KYShutterButton!
 
 var session: AVCaptureSession?
 var device: AVCaptureDevice?
 var input: AVCaptureDeviceInput?
 var output: AVCaptureMetadataOutput?
 var prevLayer: AVCaptureVideoPreviewLayer?
 
 override func viewDidLoad() {
 super.viewDidLoad()
 createSession()
 }
 
 override func viewDidAppear(_ animated: Bool) {
 super.viewDidAppear(animated)
 prevLayer?.frame.size = previewView.frame.size
 }
 
 func createSession() {
 session = AVCaptureSession()
 device = AVCaptureDevice.default(for: AVMediaType.video)
 
 do{
 input = try AVCaptureDeviceInput(device: device!)
 }
 catch{
 print(error)
 }
 
 if let input = input{
 session?.addInput(input)
 }
 
 prevLayer = AVCaptureVideoPreviewLayer(session: session!)
 prevLayer?.frame.size = previewView.frame.size
 prevLayer?.videoGravity = AVLayerVideoGravity.resizeAspectFill
 
 prevLayer?.connection?.videoOrientation = transformOrientation(orientation: UIInterfaceOrientation(rawValue: UIApplication.shared.statusBarOrientation.rawValue)!)
 
 previewView.layer.addSublayer(prevLayer!)
 
 session?.startRunning()
 }
 
 func cameraWithPosition(position: AVCaptureDevice.Position) -> AVCaptureDevice? {
 let deviceDiscoverySession = AVCaptureDevice.DiscoverySession(deviceTypes: [.builtInDualCamera, .builtInTelephotoCamera, .builtInTrueDepthCamera, .builtInWideAngleCamera, ], mediaType: .video, position: position)
 
 if let device = deviceDiscoverySession.devices.first {
 return device
 }
 return nil
 }
 
 override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
 coordinator.animate(alongsideTransition: { (context) -> Void in
 self.prevLayer?.connection?.videoOrientation = self.transformOrientation(orientation: UIInterfaceOrientation(rawValue: UIApplication.shared.statusBarOrientation.rawValue)!)
 self.prevLayer?.frame.size = self.previewView.frame.size
 }, completion: { (context) -> Void in
 
 })
 super.viewWillTransition(to: size, with: coordinator)
 }
 
 func transformOrientation(orientation: UIInterfaceOrientation) -> AVCaptureVideoOrientation {
 switch orientation {
 case .landscapeLeft:
 return .landscapeLeft
 case .landscapeRight:
 return .landscapeRight
 case .portraitUpsideDown:
 return .portraitUpsideDown
 default:
 return .portrait
 }
 }
 
 @IBAction func switchCameraSide(sender: AnyObject) {
 if let sess = session {
 let currentCameraInput: AVCaptureInput = sess.inputs[0]
 sess.removeInput(currentCameraInput)
 var newCamera: AVCaptureDevice
 if (currentCameraInput as! AVCaptureDeviceInput).device.position == .back {
 newCamera = self.cameraWithPosition(position: .front)!
 } else {
 newCamera = self.cameraWithPosition(position: .back)!
 }
 
 var newVideoInput: AVCaptureDeviceInput?
 do{
 newVideoInput = try AVCaptureDeviceInput(device: newCamera)
 }
 catch{
 print(error)
 }
 
 if let newVideoInput = newVideoInput{
 session?.addInput(newVideoInput)
 }
 }
 }
 
 @IBAction func onTapVideoRecord(_ sender: KYShutterButton) {
 
 
 }
 @IBAction func onTapTakePhoto(_ sender: Any) {
 // Make sure capturePhotoOutput is valid
 }
 
 @IBAction func turnFlashToggleAction(_ sender: Any) {
 
 if let sess = session {
 let currentCameraInput: AVCaptureInput = sess.inputs[0]
 sess.removeInput(currentCameraInput)
 var newCamera: AVCaptureDevice
 if (currentCameraInput as! AVCaptureDeviceInput).device.position == .back {
 newCamera = self.cameraWithPosition(position: .front)!
 } else {
 newCamera = self.cameraWithPosition(position: .back)!
 }
 
 var newVideoInput: AVCaptureDeviceInput?
 do{
 newVideoInput = try AVCaptureDeviceInput(device: newCamera)
 }
 catch{
 print(error)
 }
 
 if let newVideoInput = newVideoInput{
 session?.addInput(newVideoInput)
 }
 }
 }
 
 
 //Flash on Off
 //MARK: FLASH UITLITY METHODS
 func toggleTorch(on: Bool) {
 guard let device = AVCaptureDevice.default(for: .video) else { return }
 
 if device.hasTorch {
 do {
 try device.lockForConfiguration()
 
 if on == true {
 device.torchMode = .on
 } else {
 device.torchMode = .off
 }
 
 device.unlockForConfiguration()
 } catch {
 print("Torch could not be used")
 }
 } else {
 print("Torch is not available")
 }
 }
 
 }
 
 extension ViewController : AVCaptureFileOutputRecordingDelegate {
 func fileOutput(_ output: AVCaptureFileOutput, didFinishRecordingTo outputFileURL: URL, from connections: [AVCaptureConnection], error: Error?) {
 if error == nil {
 UISaveVideoAtPathToSavedPhotosAlbum(outputFileURL.path, nil, nil, nil)
 }
 print("error save \(String(describing: error))  === success \(outputFileURL) == ")
 }
 
 }

 */
 
 
